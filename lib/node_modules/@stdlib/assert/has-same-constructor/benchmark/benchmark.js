/**
* @license Apache-2.0
*
* Copyright (c) 2024 The stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var pkg = require( './../package.json' ).name;
var hasSameConstructor = require( './../lib' );


// MAIN //

/**
* Benchmark the hasSameConstructor function when provided with same value types.
*/
bench( pkg, function benchmark( b ) {
	var obj1;
	var obj2;
	var bool;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		obj1 = new Date();
		obj2 = new Date();
		bool = hasSameConstructor( obj1, obj2 );
		if ( typeof bool !== 'boolean' ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( typeof bool !== 'boolean' ) {
		b.fail( 'should return a boolean' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});

/**
* Benchmark the hasSameConstructor function when provided with other value types.
*/
bench( pkg+':other_types', function benchmark( b ) {
	var obj1;
	var obj2;
	var obj3;
	var obj4;
	var bool;
	var i;

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		obj1 = new Date();
		obj2 = new Date();
		obj3 = new String( "Hello" );
		obj4 = "World";
		bool = hasSameConstructor( obj1, obj2 );
		if ( typeof bool !== 'boolean' ) {
			b.fail( 'should return a boolean' );
		}
		bool = hasSameConstructor( obj1, obj3 );
		if ( typeof bool !== 'boolean' ) {
			b.fail( 'should return a boolean' );
		}
		bool = hasSameConstructor( obj3, obj4 );
		if ( typeof bool !== 'boolean' ) {
			b.fail( 'should return a boolean' );
		}
	}
	b.toc();
	if ( typeof bool !== 'boolean' ) {
		b.fail( 'should return a boolean' );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
