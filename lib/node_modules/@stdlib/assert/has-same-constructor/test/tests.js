/**
* @license Apache-2.0
*
* Copyright (c) 2024 The stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable object-curly-newline */

'use strict';

// MODULES //

var tape = require( 'tape' );
var hasSameConstructor = require( './../lib' );


// TESTS //

tape( 'the main export is a function', function test( t ) {
	t.strictEqual( typeof hasSameConstructor, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `true` if provided values with the same constructor', function test( t ) {
	var values;
	var i;

	values = [
		{ value: new Date(), desc: 'Date objects' },
		{ value: new String("Hello"), desc: 'String objects' },
		{ value: new Boolean(true), desc: 'Boolean objects' },
		{ value: new Number(3.14), desc: 'Number objects' },
		{ value: new RegExp("\\w+"), desc: 'RegExp objects' }
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( hasSameConstructor( values[i].value, values[i].value ), true, 'returns true when provided ' + values[i].desc );
	}
	t.end();
});

tape( 'the function returns `false` if provided values with different constructors', function test( t ) {
	var values;
	var i;

	values = [
		{ value1: new Date(), value2: "Not a Date object", desc: 'Date objects and string primitive' },
		{ value1: new String("Hello"), value2: "World", desc: 'String objects and string primitive' },
		{ value1: new Boolean(true), value2: false, desc: 'Boolean objects and boolean primitive' },
		{ value1: new Number(3.14), value2: 42, desc: 'Number objects and number primitive' },
		{ value1: new RegExp("\\w+"), value2: {}, desc: 'RegExp objects and object' }
	];

	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( hasSameConstructor( values[i].value1, values[i].value2 ), false, 'returns false when provided ' + values[i].desc );
	}
	t.end();
});

tape( 'the function returns `false` if provided values with one or both being `null` or `undefined`', function test( t ) {
	t.strictEqual( hasSameConstructor( null, null ), false, 'returns false when provided null' );
	t.strictEqual( hasSameConstructor( null, undefined ), false, 'returns false when provided null and undefined' );
	t.strictEqual( hasSameConstructor( undefined, undefined ), false, 'returns false when provided undefined' );
	t.end();
});

tape( 'the function returns `false` if provided values with one or both being primitive values', function test( t ) {
	t.strictEqual( hasSameConstructor( 5, 5 ), false, 'returns false when provided two integer primitives' );
	t.strictEqual( hasSameConstructor( "foo", "bar" ), false, 'returns false when provided two string primitives' );
	t.strictEqual( hasSameConstructor( true, false ), false, 'returns false when provided two boolean primitives' );
	t.strictEqual( hasSameConstructor( 3.14, 2.718 ), false, 'returns false when provided two floating point primitives' );
	t.strictEqual( hasSameConstructor( null, 5 ), false, 'returns false when provided null and an integer primitive' );
	t.strictEqual( hasSameConstructor( undefined, "bar" ), false, 'returns false when provided undefined and a string primitive' );
	t.end();
});
